grid-height = 30px
font-size = 12px
player-width = 30%

level(n){
	.battle {
		padding-top:unit(recursion(n, 1),'em');
		padding-bottom:unit(recursion(n, 2, 0),'em');
	}
	.sep {
		height:unit(recursion(n, 3), 'em');
	}
}

sepHeight(n)
	if n == 1
		1
	else
		2 * sepHeight(n - 1) + 3

recursion(n, x, last = 1)
	if n == 1
		last
	else
		2 * recursion(n - 1, x, last) + x

tournamentTree(n)
	level-width = unit(100 / n, '%')
	.tournament-tree {
		font-size:grid-height;
		width:980px;

		.level {width:level-width;float:left;position:relative;} /* (100 / levels) * 100%;  */
		.level > .battle {position:relative;}
		.level > .battle > article {background-repeat:no-repeat;background-position:42% 50%;height:3em;}
		.level > .battle > article.player-1 {background-image:url('../gfx/player-top.png');/*margin-top:1em;*/}
		.level > .battle > article.player-2 {background-image:url('../gfx/player-bottom.png');/*margin-bottom:1em;*/}
		.level .sep {width:100%;line-height:1em;height:1em;display:block;background:url('../gfx/vs.png') no-repeat 42% 50%;position:relative;}
		.level .sep > span {font-size:font-size;position:absolute;left:50%;top:50%;line-height:2em;margin-top:-1em;}
		.level > .battle > article .in {font-size:font-size;background:#fff;border:1px solid rgba(0,0,0,1);width:player-width;/*margin:-1px 0;*/border-radius:5px;height:100%;position:relative;}

	}
	
	.tournament-tree 
		for l in 1..n
			.level-{l}
				level(l)